<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UnitsNet.ElectricCurrent</name>
    </assembly>
    <members>
        <member name="T:UnitsNet.ElectricCurrent">
            <inheritdoc />
            <summary>
                An electric current is a flow of electric charge. In electric circuits this charge is often carried by moving electrons in a wire. It can also be carried by ions in an electrolyte, or by both ions and electrons such as in a plasma.
            </summary>
        </member>
        <member name="F:UnitsNet.ElectricCurrent._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.ElectricCurrent._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrent.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrent.Unit">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.ElectricCurrent.#ctor(System.Double,UnitsNet.Units.ElectricCurrentUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.ElectricCurrent.BaseUnit">
            <summary>
                The base unit of Duration, which is Second. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrent.MaxValue">
            <summary>
            Represents the largest possible value of Duration
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrent.MinValue">
            <summary>
            Represents the smallest possible value of Duration
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrent.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Second.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrent.Amperes">
            <summary>
                Get ElectricCurrent in Amperes.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrent.Centiamperes">
            <summary>
                Get ElectricCurrent in Centiamperes.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrent.Kiloamperes">
            <summary>
                Get ElectricCurrent in Kiloamperes.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrent.Megaamperes">
            <summary>
                Get ElectricCurrent in Megaamperes.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrent.Microamperes">
            <summary>
                Get ElectricCurrent in Microamperes.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrent.Milliamperes">
            <summary>
                Get ElectricCurrent in Milliamperes.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrent.Nanoamperes">
            <summary>
                Get ElectricCurrent in Nanoamperes.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrent.Picoamperes">
            <summary>
                Get ElectricCurrent in Picoamperes.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.FromAmperes(System.Double)">
            <summary>
                Get ElectricCurrent from Amperes.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.FromCentiamperes(System.Double)">
            <summary>
                Get ElectricCurrent from Centiamperes.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.FromKiloamperes(System.Double)">
            <summary>
                Get ElectricCurrent from Kiloamperes.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.FromMegaamperes(System.Double)">
            <summary>
                Get ElectricCurrent from Megaamperes.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.FromMicroamperes(System.Double)">
            <summary>
                Get ElectricCurrent from Microamperes.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.FromMilliamperes(System.Double)">
            <summary>
                Get ElectricCurrent from Milliamperes.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.FromNanoamperes(System.Double)">
            <summary>
                Get ElectricCurrent from Nanoamperes.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.FromPicoamperes(System.Double)">
            <summary>
                Get ElectricCurrent from Picoamperes.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.From(System.Double,UnitsNet.Units.ElectricCurrentUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.ElectricCurrentUnit" /> to <see cref="T:UnitsNet.ElectricCurrent" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>ElectricCurrent unit value.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.As(UnitsNet.Units.ElectricCurrentUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.ToUnit(UnitsNet.Units.ElectricCurrentUnit)">
            <summary>
                Converts this Duration to another Duration with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A Duration with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.GetValueInBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
    </members>
</doc>
