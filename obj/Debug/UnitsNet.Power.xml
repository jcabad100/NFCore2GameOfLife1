<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UnitsNet.Power</name>
    </assembly>
    <members>
        <member name="T:UnitsNet.Power">
            <inheritdoc />
            <summary>
                In physics, power is the rate of doing work. It is equivalent to an amount of energy consumed per unit time.
            </summary>
        </member>
        <member name="F:UnitsNet.Power._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.Power._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Power.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Power.Unit">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Power.#ctor(System.Double,UnitsNet.Units.PowerUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.Power.BaseUnit">
            <summary>
                The base unit of Duration, which is Second. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.Power.MaxValue">
            <summary>
            Represents the largest possible value of Duration
            </summary>
        </member>
        <member name="P:UnitsNet.Power.MinValue">
            <summary>
            Represents the smallest possible value of Duration
            </summary>
        </member>
        <member name="P:UnitsNet.Power.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Second.
            </summary>
        </member>
        <member name="P:UnitsNet.Power.BoilerHorsepower">
            <summary>
                Get Power in BoilerHorsepower.
            </summary>
        </member>
        <member name="P:UnitsNet.Power.BritishThermalUnitsPerHour">
            <summary>
                Get Power in BritishThermalUnitsPerHour.
            </summary>
        </member>
        <member name="P:UnitsNet.Power.Decawatts">
            <summary>
                Get Power in Decawatts.
            </summary>
        </member>
        <member name="P:UnitsNet.Power.Deciwatts">
            <summary>
                Get Power in Deciwatts.
            </summary>
        </member>
        <member name="P:UnitsNet.Power.ElectricalHorsepower">
            <summary>
                Get Power in ElectricalHorsepower.
            </summary>
        </member>
        <member name="P:UnitsNet.Power.Femtowatts">
            <summary>
                Get Power in Femtowatts.
            </summary>
        </member>
        <member name="P:UnitsNet.Power.GigajoulesPerHour">
            <summary>
                Get Power in GigajoulesPerHour.
            </summary>
        </member>
        <member name="P:UnitsNet.Power.Gigawatts">
            <summary>
                Get Power in Gigawatts.
            </summary>
        </member>
        <member name="P:UnitsNet.Power.HydraulicHorsepower">
            <summary>
                Get Power in HydraulicHorsepower.
            </summary>
        </member>
        <member name="P:UnitsNet.Power.JoulesPerHour">
            <summary>
                Get Power in JoulesPerHour.
            </summary>
        </member>
        <member name="P:UnitsNet.Power.KilobritishThermalUnitsPerHour">
            <summary>
                Get Power in KilobritishThermalUnitsPerHour.
            </summary>
        </member>
        <member name="P:UnitsNet.Power.KilojoulesPerHour">
            <summary>
                Get Power in KilojoulesPerHour.
            </summary>
        </member>
        <member name="P:UnitsNet.Power.Kilowatts">
            <summary>
                Get Power in Kilowatts.
            </summary>
        </member>
        <member name="P:UnitsNet.Power.MechanicalHorsepower">
            <summary>
                Get Power in MechanicalHorsepower.
            </summary>
        </member>
        <member name="P:UnitsNet.Power.MegajoulesPerHour">
            <summary>
                Get Power in MegajoulesPerHour.
            </summary>
        </member>
        <member name="P:UnitsNet.Power.Megawatts">
            <summary>
                Get Power in Megawatts.
            </summary>
        </member>
        <member name="P:UnitsNet.Power.MetricHorsepower">
            <summary>
                Get Power in MetricHorsepower.
            </summary>
        </member>
        <member name="P:UnitsNet.Power.Microwatts">
            <summary>
                Get Power in Microwatts.
            </summary>
        </member>
        <member name="P:UnitsNet.Power.MillijoulesPerHour">
            <summary>
                Get Power in MillijoulesPerHour.
            </summary>
        </member>
        <member name="P:UnitsNet.Power.Milliwatts">
            <summary>
                Get Power in Milliwatts.
            </summary>
        </member>
        <member name="P:UnitsNet.Power.Nanowatts">
            <summary>
                Get Power in Nanowatts.
            </summary>
        </member>
        <member name="P:UnitsNet.Power.Petawatts">
            <summary>
                Get Power in Petawatts.
            </summary>
        </member>
        <member name="P:UnitsNet.Power.Picowatts">
            <summary>
                Get Power in Picowatts.
            </summary>
        </member>
        <member name="P:UnitsNet.Power.Terawatts">
            <summary>
                Get Power in Terawatts.
            </summary>
        </member>
        <member name="P:UnitsNet.Power.Watts">
            <summary>
                Get Power in Watts.
            </summary>
        </member>
        <member name="M:UnitsNet.Power.FromBoilerHorsepower(System.Double)">
            <summary>
                Get Power from BoilerHorsepower.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromBritishThermalUnitsPerHour(System.Double)">
            <summary>
                Get Power from BritishThermalUnitsPerHour.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromDecawatts(System.Double)">
            <summary>
                Get Power from Decawatts.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromDeciwatts(System.Double)">
            <summary>
                Get Power from Deciwatts.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromElectricalHorsepower(System.Double)">
            <summary>
                Get Power from ElectricalHorsepower.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromFemtowatts(System.Double)">
            <summary>
                Get Power from Femtowatts.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromGigajoulesPerHour(System.Double)">
            <summary>
                Get Power from GigajoulesPerHour.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromGigawatts(System.Double)">
            <summary>
                Get Power from Gigawatts.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromHydraulicHorsepower(System.Double)">
            <summary>
                Get Power from HydraulicHorsepower.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromJoulesPerHour(System.Double)">
            <summary>
                Get Power from JoulesPerHour.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromKilobritishThermalUnitsPerHour(System.Double)">
            <summary>
                Get Power from KilobritishThermalUnitsPerHour.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromKilojoulesPerHour(System.Double)">
            <summary>
                Get Power from KilojoulesPerHour.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromKilowatts(System.Double)">
            <summary>
                Get Power from Kilowatts.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromMechanicalHorsepower(System.Double)">
            <summary>
                Get Power from MechanicalHorsepower.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromMegajoulesPerHour(System.Double)">
            <summary>
                Get Power from MegajoulesPerHour.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromMegawatts(System.Double)">
            <summary>
                Get Power from Megawatts.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromMetricHorsepower(System.Double)">
            <summary>
                Get Power from MetricHorsepower.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromMicrowatts(System.Double)">
            <summary>
                Get Power from Microwatts.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromMillijoulesPerHour(System.Double)">
            <summary>
                Get Power from MillijoulesPerHour.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromMilliwatts(System.Double)">
            <summary>
                Get Power from Milliwatts.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromNanowatts(System.Double)">
            <summary>
                Get Power from Nanowatts.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromPetawatts(System.Double)">
            <summary>
                Get Power from Petawatts.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromPicowatts(System.Double)">
            <summary>
                Get Power from Picowatts.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromTerawatts(System.Double)">
            <summary>
                Get Power from Terawatts.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromWatts(System.Double)">
            <summary>
                Get Power from Watts.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.From(System.Double,UnitsNet.Units.PowerUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.PowerUnit" /> to <see cref="T:UnitsNet.Power" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>Power unit value.</returns>
        </member>
        <member name="M:UnitsNet.Power.As(UnitsNet.Units.PowerUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Power.ToUnit(UnitsNet.Units.PowerUnit)">
            <summary>
                Converts this Duration to another Duration with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A Duration with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Power.GetValueInBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
    </members>
</doc>
